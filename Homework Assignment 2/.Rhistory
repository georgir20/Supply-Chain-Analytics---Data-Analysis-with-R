kosten = read.csv2("output_cost_8Players_v0013.csv")
library("zoo")
library("forecast")
library("ggplot2")
# Erstellen einer Tabelle mit der Nachfrage je Monat je Region
periode=sprintf("%1.0f, %02d", transaktionen$Year, transaktionen$Month)
Demand = data.frame(aggregate(Sales ~ region + periode, data = transaktionen, sum))
# Bereinigung der Demand-Tabelle, da im Jahr 2021 keine Sales stattgefunden haben
# und die Einträge somit entfallen
transaktionen=subset(transaktionen, Year!=2021)
periode=sprintf("%1.0f, %02d",transaktionen$Year, transaktionen$Month)
Demand = data.frame(aggregate(Sales ~ region + periode, data =transaktionen, sum))
# Veränderung des Spaltennames "Sales" zu "Demand"
colnames(Demand)[3] <- "Demand"
# Ausgabe des Tabellenkopfes
head(Demand)
# Umwandlung der Demand-Daten in das Wide-Format
Demand_wide =
reshape(Demand, timevar = "region", idvar = "periode", v.names = "Demand", direction = "wide")
# Ausgabe des Tabellenkopfes
head(Demand_wide)
# Erstellen der Zeitreihe für jede Region, mit Frequenz 12
ts_Japan = ts(Demand_wide$Demand.Japan, frequency = 12)
ts_Peking = ts(Demand_wide$Demand.Peking, frequency = 12)
ts_Phlppn = ts(Demand_wide$Demand.Phlppn, frequency = 12)
ts_Shangh = ts(Demand_wide$Demand.Shangh, frequency = 12)
ts_Skorea = ts(Demand_wide$Demand.Skorea, frequency = 12)
ggplot(data=Demand_wide, aes(x=periode, group=1)) +
geom_line(aes(y = Demand_wide$Demand.Japan, col="Japan"))  +
geom_line(aes(y = Demand_wide$Demand.Peking, col="Peking"), size=2) +
geom_line(aes(y = Demand_wide$Demand.Phlppn, col="Phillipinen"))  +
geom_line(aes(y = Demand_wide$Demand.Shangh, col="Shanghai"))  +
geom_line(aes(y = Demand_wide$Demand.Skorea, col="Südkorea"))  +
xlab("Jahr") +
ylab("Nachfrage") +
labs(colour = "Region") +
scale_x_discrete(breaks = c("2016, 01","2017, 01","2018, 01","2019, 01","2020, 01"))
m_dp = ets(ts_Peking, model= "ZZZ")
#(1) Zusammenfassung des Modells
m_dp
#(2) ursprüngliche Zeitreihe und Werte der Residuen ausgeben:
fcast_dp = forecast(m_dp, 12)
residuals = data.frame(Demand_wide[,c("periode","Demand.Peking")])
residuals[,3] = data.frame(fcast_dp$x-fcast_dp$fitted)
colnames(residuals) = c("Periode","ursprünglicher Wert","Residuen")
residuals
av_residual = mean(window(fcast_dp$x,5)-window(fcast_dp$fitted,5))
cat("Die durchschnittliche monatliche Abweichung der Modellwerte von den Originalwerten im Jahr
2020 liegt bei", round(av_residual,2), ".","\n")
# Hintergrund erzeugen (ohne Daten!)
ggplot(data = NULL, aes(ymin = 10000, ymax = 22000)) +
labs(title="Nachfrageverlauf und Vorhersage Peking", y="Nachfrage", x = "Jahr")+
theme(plot.title = element_text(hjust=0.5)) +
scale_x_continuous(breaks = c(1,13,25,37,49,61,73),
labels = c("2016","2017","2018","2019","2020", "2021","2022")) +
# Erste Linie hinzufuegen (keine Daten; X-Achse = Reihe von 1 bis laenge fitting Werten und Forecast Werten)
geom_line(data = NULL, aes(x = seq(1, length(c(fcast_dp$fitted, fcast_dp$mean)), 1),
y = c(as.numeric(fcast_dp$fitted), as.numeric(fcast_dp$mean)),
colour = 'forecast')) +
# Zweite Linie hinzufuegen (Keine Daten; X-Achse = Reihe von 1 bis laenge Beobachtungen)
geom_line(data = NULL, aes(x = seq(1, length(fcast_dp$x), 1),
y = as.numeric(fcast_dp$x),
colour = 'original')) +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("forecast", "original"), values = c("red", "blue"))
#Mean Forecast Error (MFE)
cat("MFE:", round(mean(as.numeric(fcast_dp$x - fcast_dp$fitted)),2), "\n")
#Mean Absolute Error (MAE)
cat("MAE:", round(mean(abs(as.numeric(fcast_dp$x - fcast_dp$fitted))),2), "\n")
#Mean Squared Error (MSE)
cat("MSE:", round(mean((as.numeric(fcast_dp$x - fcast_dp$fitted)^2)),2), "\n")
#Mean Absolute Percentage Error (MAPE)
cat("MAPE:", round(mean(abs((as.numeric(fcast_dp$x - fcast_dp$fitted)/as.numeric(fcast_dp$x)) * 100)),2), "%", "\n")
#Modelle erstellen:
fcast_dp_ANA = forecast(ets(ts_Peking, model= "ANA"),12)
fcast_dp_ZZZ = fcast_dp
#Dataframe zum Vergleichen initialisieren:
model_comparison = data.frame(matrix(ncol = 2, nrow = 3))
colnames(model_comparison) = c("ANA","ZZZ")
rownames(model_comparison) = c("MAE","MSE","MAPE")
#Mean Absolute Error (MAE)
model_comparison[c("MAE"),c("ANA")] = round(mean(abs(as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted))),2)
model_comparison[c("MAE"),c("ZZZ")] = round(mean(abs(as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted))),2)
#Mean Squared Error (MSE)
model_comparison[c("MSE"),c("ANA")] = round(mean((as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted)^2)),2)
model_comparison[c("MSE"),c("ZZZ")] = round(mean((as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted)^2)),2)
#Mean Absolute Percentage Error (MAPE)
model_comparison[c("MAPE"),c("ANA")] =  paste(round(mean(abs((as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted)/as.numeric(fcast_dp_ANA$x)) * 100)),2),"%")
model_comparison[c("MAPE"),c("ZZZ")] =  paste(round(mean(abs((as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted)/as.numeric(fcast_dp_ZZZ$x)) * 100)),2),"%")
model_comparison
#Modelle erstellen:
fcast_Japan = forecast(ets(ts_Japan, model= "ZZZ"),12)
fcast_Peking = fcast_dp
fcast_Phlppn = forecast(ets(ts_Phlppn, model= "ZZZ"),12)
fcast_Shangh = forecast(ets(ts_Shangh, model= "ZZZ"),12)
fcast_Skorea = forecast(ets(ts_Skorea, model= "ZZZ"),12)
#Dataframe zum Vergleichen initialisieren:
region_comparison = data.frame(matrix(ncol = 5, nrow = 2))
colnames(region_comparison) = c("Japan","Peking","Phlppn","Shangh","Skorea")
rownames(region_comparison) = c("Modell","MAE")
#Fehlerkennzahlen eintragen:
region_comparison[c("MAE"),c("Japan")] = round(mean(abs(as.numeric(fcast_Japan$x - fcast_Japan$fitted))),2)
region_comparison[c("MAE"),c("Peking")] = round(mean(abs(as.numeric(fcast_Peking$x - fcast_Peking$fitted))),2)
region_comparison[c("MAE"),c("Phlppn")] = round(mean(abs(as.numeric(fcast_Phlppn$x - fcast_Phlppn$fitted))),2)
region_comparison[c("MAE"),c("Shangh")] = round(mean(abs(as.numeric(fcast_Shangh$x - fcast_Shangh$fitted))),2)
region_comparison[c("MAE"),c("Skorea")] = round(mean(abs(as.numeric(fcast_Skorea$x - fcast_Skorea$fitted))),2)
#Modelle eintragen:
region_comparison[c("Modell"),c("Japan")] = fcast_Japan$method
region_comparison[c("Modell"),c("Peking")] = fcast_Peking$method
region_comparison[c("Modell"),c("Phlppn")] = fcast_Phlppn$method
region_comparison[c("Modell"),c("Shangh")] = fcast_Shangh$method
region_comparison[c("Modell"),c("Skorea")] = fcast_Skorea$method
region_comparison
#Demand für alle
Demand_21SE2 = round(sum(data.frame(fcast_Japan$mean)[7:12,],
data.frame(fcast_Peking$mean)[7:12,],
data.frame(fcast_Phlppn$mean)[7:12,],
data.frame(fcast_Shangh$mean)[7:12,],
data.frame(fcast_Skorea$mean)[7:12,]))
cat("Für die zweite Hälfte von 2021 werden ca.",Demand_21SE2,"Flaschen benötigt")
# Erstellen eines Subset in dem alle Sales fuer unser Produkt enthalten sind
sales_206 = subset (transaktionen, Product == "Gruppe206")
# Erstellen einer Tabelle mit der Nachfrage je Monat/Jahr in Japan für unser Produkt
Demand_206 = aggregate(Sales ~ region + Year + Month, data = sales_206, sum)
Demand_Japan = subset (Demand_206, region =="Japan")
#Filtern der Ergebnisse nach Monat Dezember
Demand_Japan_December = subset (Demand_Japan, Month == "12")
Demand_Japan_December_Total = aggregate(Sales ~ region, data = Demand_Japan_December, sum)
Demand_Japan_December_Average = round(Demand_Japan_December_Total$Sales/5)
cat("Durchschnittlich wurden im Monat Dezember",Demand_Japan_December_Average,"Flaschen in Olaf's
Supermarkt in Japan nachgefragt.")
cat( "\n")
cat("\n")
# Erstellen einer Zeitreihe für Japan
periode2=sprintf("%1.0f, %02d", sales_206$Year, sales_206$Month)
Demand_206_ts = aggregate(Sales ~ region + periode2, data = sales_206, sum)
Demand_206_Japan_ts = subset (Demand_206_ts, region =="Japan")
ts_Japan2 = ts(Demand_206_Japan_ts$Sales, frequency = 12)
# Automatisches Modell für Japan erstellen
m_Japan_206 = ets(ts_Japan2, model = "ZZZ")
#Forecast für Japan in 2021 erstellen (12 Monate)
fcast_Japan = forecast(ts_Japan2, 12)
# Forecast in einen präparierten Dataframe einfügen
Japan_Forecast = data.frame(matrix(ncol = 2, nrow = 12))
colnames(Japan_Forecast) = c("Month","Demand_Forecast_Japan_2021")
Japan_Forecast$Month <- c("Januar" , "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember")
Japan_Forecast$Demand_Forecast_Japan_2021 = as.numeric(fcast_Japan$mean)
# Forecast nur für den Dezember in 2021 ausgeben
Forecast_Dezember = subset (Japan_Forecast, Month == "Dezember")
Dezember2021 = round(Forecast_Dezember$Demand_Forecast_Japan_2021)
# Differenz des neuen Forecast zum bisherigen Durchschnitt berechnen und Ergebnisse ausgeben
Dezember2021_Diff = Dezember2021 - Demand_Japan_December_Average
cat("\n")
cat("Im Dezember dieses Jahres kann Olaf mit einer Nachfrage von", Dezember2021, "Flaschen unserer Limonaden-Marke rechnen.")
cat("\n")
cat("Das heißt er muss mit einer erhöhten Nachfrage von ca.", Dezember2021_Diff, " Flaschen im Vergleich zum bisherigen Durchschnitt im Dezember rechnen.")
# Erstellen eines Subset in dem alle Sales fuer unser Produkt enthalten sind
sales_206 = subset (transaktionen, Product == "Gruppe206")
# Erstellen einer Tabelle mit der Nachfrage je Monat/Jahr in Japan für unser Produkt
Demand_206 = aggregate(Sales ~ region + Year + Month, data = sales_206, sum)
Demand_Japan = subset (Demand_206, region =="Japan")
#Filtern der Ergebnisse nach Monat Dezember
Demand_Japan_December = subset (Demand_Japan, Month == "12")
Demand_Japan_December_Total = aggregate(Sales ~ region, data = Demand_Japan_December, sum)
Demand_Japan_December_Average = round(Demand_Japan_December_Total$Sales/5)
cat("Durchschnittlich wurden im Monat Dezember",Demand_Japan_December_Average,"Flaschen in Olaf's
Supermarkt in Japan nachgefragt.")
cat( "\n")
cat("\n")
# Erstellen einer Zeitreihe für Japan
periode2=sprintf("%1.0f, %02d", sales_206$Year, sales_206$Month)
Demand_206_ts = aggregate(Sales ~ region + periode2, data = sales_206, sum)
Demand_206_Japan_ts = subset (Demand_206_ts, region =="Japan")
ts_Japan2 = ts(Demand_206_Japan_ts$Sales, frequency = 12)
# Automatisches Modell für Japan erstellen
m_Japan_206 = ets(ts_Japan2, model = "ZZZ")
#Forecast für Japan in 2021 erstellen (12 Monate)
fcast_Japan = forecast(ts_Japan2, 12)
# Forecast in einen präparierten Dataframe einfügen
Japan_Forecast = data.frame(matrix(ncol = 2, nrow = 12))
colnames(Japan_Forecast) = c("Month","Demand_Forecast_Japan_2021")
Japan_Forecast$Month <- c("Januar" , "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember")
Japan_Forecast$Demand_Forecast_Japan_2021 = as.numeric(fcast_Japan$mean)
# Forecast nur für den Dezember in 2021 ausgeben
Forecast_Dezember = subset (Japan_Forecast, Month == "Dezember")
Dezember2021 = round(Forecast_Dezember$Demand_Forecast_Japan_2021)
# Differenz des neuen Forecast zum bisherigen Durchschnitt berechnen und Ergebnisse ausgeben
Dezember2021_Diff = Dezember2021 - Demand_Japan_December_Average
cat("\n")
cat("Im Dezember dieses Jahres kann Olaf mit einer Nachfrage von", Dezember2021, "Flaschen unserer Limonaden-Marke rechnen.")
cat("\n")
cat("Das heißt er muss mit einer erhöhten Nachfrage von ca.", Dezember2021_Diff, "Flaschen im Vergleich zum bisherigen Durchschnitt im Dezember rechnen.")
knitr::opts_chunk$set(echo = TRUE)
transaktionen = read.csv2("output_transactions_8Players_v0013.csv")
service = read.csv2("output_services_8Players_v0013.csv")
preise = read.csv2("output_prices_8Players_v0013.csv")
kosten = read.csv2("output_cost_8Players_v0013.csv")
library("zoo")
library("forecast")
library("ggplot2")
# Erstellen einer Tabelle mit der Nachfrage je Monat je Region
periode=sprintf("%1.0f, %02d", transaktionen$Year, transaktionen$Month)
Demand = data.frame(aggregate(Sales ~ region + periode, data = transaktionen, sum))
# Bereinigung der Demand-Tabelle, da im Jahr 2021 keine Sales stattgefunden haben
# und die Einträge somit entfallen
transaktionen=subset(transaktionen, Year!=2021)
periode=sprintf("%1.0f, %02d",transaktionen$Year, transaktionen$Month)
Demand = data.frame(aggregate(Sales ~ region + periode, data =transaktionen, sum))
# Veränderung des Spaltennames "Sales" zu "Demand"
colnames(Demand)[3] <- "Demand"
# Ausgabe des Tabellenkopfes
head(Demand)
# Umwandlung der Demand-Daten in das Wide-Format
Demand_wide =
reshape(Demand, timevar = "region", idvar = "periode", v.names = "Demand", direction = "wide")
# Ausgabe des Tabellenkopfes
head(Demand_wide)
# Erstellen der Zeitreihe für jede Region, mit Frequenz 12
ts_Japan = ts(Demand_wide$Demand.Japan, frequency = 12)
ts_Peking = ts(Demand_wide$Demand.Peking, frequency = 12)
ts_Phlppn = ts(Demand_wide$Demand.Phlppn, frequency = 12)
ts_Shangh = ts(Demand_wide$Demand.Shangh, frequency = 12)
ts_Skorea = ts(Demand_wide$Demand.Skorea, frequency = 12)
ggplot(data=Demand_wide, aes(x=periode, group=1)) +
geom_line(aes(y = Demand_wide$Demand.Japan, col="Japan"))  +
geom_line(aes(y = Demand_wide$Demand.Peking, col="Peking"), size=2) +
geom_line(aes(y = Demand_wide$Demand.Phlppn, col="Phillipinen"))  +
geom_line(aes(y = Demand_wide$Demand.Shangh, col="Shanghai"))  +
geom_line(aes(y = Demand_wide$Demand.Skorea, col="Südkorea"))  +
xlab("Jahr") +
ylab("Nachfrage") +
labs(colour = "Region") +
scale_x_discrete(breaks = c("2016, 01","2017, 01","2018, 01","2019, 01","2020, 01"))
m_dp = ets(ts_Peking, model= "ZZZ")
#(1) Zusammenfassung des Modells
m_dp
#(2) ursprüngliche Zeitreihe und Werte der Residuen ausgeben:
fcast_dp = forecast(m_dp, 12)
residuals = data.frame(Demand_wide[,c("periode","Demand.Peking")])
residuals[,3] = data.frame(fcast_dp$x-fcast_dp$fitted)
colnames(residuals) = c("Periode","ursprünglicher Wert","Residuen")
residuals
av_residual = mean(window(fcast_dp$x,5)-window(fcast_dp$fitted,5))
cat("Die durchschnittliche monatliche Abweichung der Modellwerte von den Originalwerten im Jahr
2020 liegt bei", round(av_residual,2), ".","\n")
# Hintergrund erzeugen (ohne Daten!)
ggplot(data = NULL, aes(ymin = 10000, ymax = 22000)) +
labs(title="Nachfrageverlauf und Vorhersage Peking", y="Nachfrage", x = "Jahr")+
theme(plot.title = element_text(hjust=0.5)) +
scale_x_continuous(breaks = c(1,13,25,37,49,61,73),
labels = c("2016","2017","2018","2019","2020", "2021","2022")) +
# Erste Linie hinzufuegen (keine Daten; X-Achse = Reihe von 1 bis laenge fitting Werten und Forecast Werten)
geom_line(data = NULL, aes(x = seq(1, length(c(fcast_dp$fitted, fcast_dp$mean)), 1),
y = c(as.numeric(fcast_dp$fitted), as.numeric(fcast_dp$mean)),
colour = 'forecast')) +
# Zweite Linie hinzufuegen (Keine Daten; X-Achse = Reihe von 1 bis laenge Beobachtungen)
geom_line(data = NULL, aes(x = seq(1, length(fcast_dp$x), 1),
y = as.numeric(fcast_dp$x),
colour = 'original')) +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("forecast", "original"), values = c("red", "blue"))
#Mean Forecast Error (MFE)
cat("MFE:", round(mean(as.numeric(fcast_dp$x - fcast_dp$fitted)),2), "\n")
#Mean Absolute Error (MAE)
cat("MAE:", round(mean(abs(as.numeric(fcast_dp$x - fcast_dp$fitted))),2), "\n")
#Mean Squared Error (MSE)
cat("MSE:", round(mean((as.numeric(fcast_dp$x - fcast_dp$fitted)^2)),2), "\n")
#Mean Absolute Percentage Error (MAPE)
cat("MAPE:", round(mean(abs((as.numeric(fcast_dp$x - fcast_dp$fitted)/as.numeric(fcast_dp$x)) * 100)),2), "%", "\n")
#Modelle erstellen:
fcast_dp_ANA = forecast(ets(ts_Peking, model= "ANA"),12)
fcast_dp_ZZZ = fcast_dp
#Dataframe zum Vergleichen initialisieren:
model_comparison = data.frame(matrix(ncol = 2, nrow = 3))
colnames(model_comparison) = c("ANA","ZZZ")
rownames(model_comparison) = c("MAE","MSE","MAPE")
#Mean Absolute Error (MAE)
model_comparison[c("MAE"),c("ANA")] = round(mean(abs(as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted))),2)
model_comparison[c("MAE"),c("ZZZ")] = round(mean(abs(as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted))),2)
#Mean Squared Error (MSE)
model_comparison[c("MSE"),c("ANA")] = round(mean((as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted)^2)),2)
model_comparison[c("MSE"),c("ZZZ")] = round(mean((as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted)^2)),2)
#Mean Absolute Percentage Error (MAPE)
model_comparison[c("MAPE"),c("ANA")] =  paste(round(mean(abs((as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted)/as.numeric(fcast_dp_ANA$x)) * 100)),2),"%")
model_comparison[c("MAPE"),c("ZZZ")] =  paste(round(mean(abs((as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted)/as.numeric(fcast_dp_ZZZ$x)) * 100)),2),"%")
model_comparison
#Modelle erstellen:
fcast_Japan = forecast(ets(ts_Japan, model= "ZZZ"),12)
fcast_Peking = fcast_dp
fcast_Phlppn = forecast(ets(ts_Phlppn, model= "ZZZ"),12)
fcast_Shangh = forecast(ets(ts_Shangh, model= "ZZZ"),12)
fcast_Skorea = forecast(ets(ts_Skorea, model= "ZZZ"),12)
#Dataframe zum Vergleichen initialisieren:
region_comparison = data.frame(matrix(ncol = 5, nrow = 2))
colnames(region_comparison) = c("Japan","Peking","Phlppn","Shangh","Skorea")
rownames(region_comparison) = c("Modell","MAE")
#Fehlerkennzahlen eintragen:
region_comparison[c("MAE"),c("Japan")] = round(mean(abs(as.numeric(fcast_Japan$x - fcast_Japan$fitted))),2)
region_comparison[c("MAE"),c("Peking")] = round(mean(abs(as.numeric(fcast_Peking$x - fcast_Peking$fitted))),2)
region_comparison[c("MAE"),c("Phlppn")] = round(mean(abs(as.numeric(fcast_Phlppn$x - fcast_Phlppn$fitted))),2)
region_comparison[c("MAE"),c("Shangh")] = round(mean(abs(as.numeric(fcast_Shangh$x - fcast_Shangh$fitted))),2)
region_comparison[c("MAE"),c("Skorea")] = round(mean(abs(as.numeric(fcast_Skorea$x - fcast_Skorea$fitted))),2)
#Modelle eintragen:
region_comparison[c("Modell"),c("Japan")] = fcast_Japan$method
region_comparison[c("Modell"),c("Peking")] = fcast_Peking$method
region_comparison[c("Modell"),c("Phlppn")] = fcast_Phlppn$method
region_comparison[c("Modell"),c("Shangh")] = fcast_Shangh$method
region_comparison[c("Modell"),c("Skorea")] = fcast_Skorea$method
region_comparison
#Demand für alle
Demand_21SE2 = round(sum(data.frame(fcast_Japan$mean)[7:12,],
data.frame(fcast_Peking$mean)[7:12,],
data.frame(fcast_Phlppn$mean)[7:12,],
data.frame(fcast_Shangh$mean)[7:12,],
data.frame(fcast_Skorea$mean)[7:12,]))
cat("Für die zweite Hälfte von 2021 werden ca.",Demand_21SE2,"Flaschen benötigt")
# Erstellen eines Subset in dem alle Sales fuer unser Produkt enthalten sind
sales_206 = subset (transaktionen, Product == "Gruppe206")
# Erstellen einer Tabelle mit der Nachfrage je Monat/Jahr in Japan für unser Produkt
Demand_206 = aggregate(Sales ~ region + Year + Month, data = sales_206, sum)
Demand_Japan = subset (Demand_206, region =="Japan")
#Filtern der Ergebnisse nach Monat Dezember
Demand_Japan_December = subset (Demand_Japan, Month == "12")
Demand_Japan_December_Total = aggregate(Sales ~ region, data = Demand_Japan_December, sum)
Demand_Japan_December_Average = round(Demand_Japan_December_Total$Sales/5)
cat("Durchschnittlich wurden im Monat Dezember",Demand_Japan_December_Average,"Flaschen in Olaf's
Supermarkt in Japan nachgefragt.")
cat( "\n")
cat("\n")
# Erstellen einer Zeitreihe für Japan
periode2=sprintf("%1.0f, %02d", sales_206$Year, sales_206$Month)
Demand_206_ts = aggregate(Sales ~ region + periode2, data = sales_206, sum)
Demand_206_Japan_ts = subset (Demand_206_ts, region =="Japan")
ts_Japan2 = ts(Demand_206_Japan_ts$Sales, frequency = 12)
# Automatisches Modell für Japan erstellen
m_Japan_206 = ets(ts_Japan2, model = "ZZZ")
#Forecast für Japan in 2021 erstellen (12 Monate)
fcast_Japan = forecast(ts_Japan2, 12)
# Forecast in einen präparierten Dataframe einfügen
Japan_Forecast = data.frame(matrix(ncol = 2, nrow = 12))
colnames(Japan_Forecast) = c("Month","Demand_Forecast_Japan_2021")
Japan_Forecast$Month <- c("Januar" , "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember")
Japan_Forecast$Demand_Forecast_Japan_2021 = as.numeric(fcast_Japan$mean)
# Forecast nur für den Dezember in 2021 ausgeben
Forecast_Dezember = subset (Japan_Forecast, Month == "Dezember")
Dezember2021 = round(Forecast_Dezember$Demand_Forecast_Japan_2021)
# Differenz des neuen Forecast zum bisherigen Durchschnitt berechnen und Ergebnisse ausgeben
Dezember2021_Diff = Dezember2021 - Demand_Japan_December_Average
cat("\n")
cat("Im Dezember dieses Jahres kann Olaf mit einer Nachfrage von", Dezember2021, "Flaschen unserer Limonaden-Marke rechnen.")
cat("\n")
cat("Das heißt er muss mit einer erhöhten Nachfrage von ca.", Dezember2021_Diff, "Flaschen im Vergleich zum bisherigen Durchschnitt im Dezember rechnen.")
knitr::opts_chunk$set(echo = TRUE)
transaktionen = read.csv2("output_transactions_8Players_v0013.csv")
service = read.csv2("output_services_8Players_v0013.csv")
preise = read.csv2("output_prices_8Players_v0013.csv")
kosten = read.csv2("output_cost_8Players_v0013.csv")
library("zoo")
library("forecast")
library("ggplot2")
# Erstellen einer Tabelle mit der Nachfrage je Monat je Region
periode=sprintf("%1.0f, %02d", transaktionen$Year, transaktionen$Month)
Demand = data.frame(aggregate(Sales ~ region + periode, data = transaktionen, sum))
# Bereinigung der Demand-Tabelle, da im Jahr 2021 keine Sales stattgefunden haben
# und die Einträge somit entfallen
transaktionen=subset(transaktionen, Year!=2021)
periode=sprintf("%1.0f, %02d",transaktionen$Year, transaktionen$Month)
Demand = data.frame(aggregate(Sales ~ region + periode, data =transaktionen, sum))
# Veränderung des Spaltennames "Sales" zu "Demand"
colnames(Demand)[3] <- "Demand"
# Ausgabe des Tabellenkopfes
head(Demand)
# Umwandlung der Demand-Daten in das Wide-Format
Demand_wide =
reshape(Demand, timevar = "region", idvar = "periode", v.names = "Demand", direction = "wide")
# Ausgabe des Tabellenkopfes
head(Demand_wide)
# Erstellen der Zeitreihe für jede Region, mit Frequenz 12
ts_Japan = ts(Demand_wide$Demand.Japan, frequency = 12)
ts_Peking = ts(Demand_wide$Demand.Peking, frequency = 12)
ts_Phlppn = ts(Demand_wide$Demand.Phlppn, frequency = 12)
ts_Shangh = ts(Demand_wide$Demand.Shangh, frequency = 12)
ts_Skorea = ts(Demand_wide$Demand.Skorea, frequency = 12)
ggplot(data=Demand_wide, aes(x=periode, group=1)) +
geom_line(aes(y = Demand_wide$Demand.Japan, col="Japan"))  +
geom_line(aes(y = Demand_wide$Demand.Peking, col="Peking"), size=2) +
geom_line(aes(y = Demand_wide$Demand.Phlppn, col="Phillipinen"))  +
geom_line(aes(y = Demand_wide$Demand.Shangh, col="Shanghai"))  +
geom_line(aes(y = Demand_wide$Demand.Skorea, col="Südkorea"))  +
xlab("Jahr") +
ylab("Nachfrage") +
labs(colour = "Region") +
scale_x_discrete(breaks = c("2016, 01","2017, 01","2018, 01","2019, 01","2020, 01"))
m_dp = ets(ts_Peking, model= "ZZZ")
#(1) Zusammenfassung des Modells
m_dp
#(2) ursprüngliche Zeitreihe und Werte der Residuen ausgeben:
fcast_dp = forecast(m_dp, 12)
residuals = data.frame(Demand_wide[,c("periode","Demand.Peking")])
residuals[,3] = data.frame(fcast_dp$x-fcast_dp$fitted)
colnames(residuals) = c("Periode","ursprünglicher Wert","Residuen")
residuals
av_residual = mean(window(fcast_dp$x,5)-window(fcast_dp$fitted,5))
cat("Die durchschnittliche monatliche Abweichung der Modellwerte von den Originalwerten im Jahr
2020 liegt bei", round(av_residual,2), ".","\n")
# Hintergrund erzeugen (ohne Daten!)
ggplot(data = NULL, aes(ymin = 10000, ymax = 22000)) +
labs(title="Nachfrageverlauf und Vorhersage Peking", y="Nachfrage", x = "Jahr")+
theme(plot.title = element_text(hjust=0.5)) +
scale_x_continuous(breaks = c(1,13,25,37,49,61,73),
labels = c("2016","2017","2018","2019","2020", "2021","2022")) +
# Erste Linie hinzufuegen (keine Daten; X-Achse = Reihe von 1 bis laenge fitting Werten und Forecast Werten)
geom_line(data = NULL, aes(x = seq(1, length(c(fcast_dp$fitted, fcast_dp$mean)), 1),
y = c(as.numeric(fcast_dp$fitted), as.numeric(fcast_dp$mean)),
colour = 'forecast')) +
# Zweite Linie hinzufuegen (Keine Daten; X-Achse = Reihe von 1 bis laenge Beobachtungen)
geom_line(data = NULL, aes(x = seq(1, length(fcast_dp$x), 1),
y = as.numeric(fcast_dp$x),
colour = 'original')) +
# Farben fuer Beschriftungen festlegen
scale_colour_manual(breaks = c("forecast", "original"), values = c("red", "blue"))
#Mean Forecast Error (MFE)
cat("MFE:", round(mean(as.numeric(fcast_dp$x - fcast_dp$fitted)),2), "\n")
#Mean Absolute Error (MAE)
cat("MAE:", round(mean(abs(as.numeric(fcast_dp$x - fcast_dp$fitted))),2), "\n")
#Mean Squared Error (MSE)
cat("MSE:", round(mean((as.numeric(fcast_dp$x - fcast_dp$fitted)^2)),2), "\n")
#Mean Absolute Percentage Error (MAPE)
cat("MAPE:", round(mean(abs((as.numeric(fcast_dp$x - fcast_dp$fitted)/as.numeric(fcast_dp$x)) * 100)),2), "%", "\n")
#Modelle erstellen:
fcast_dp_ANA = forecast(ets(ts_Peking, model= "ANA"),12)
fcast_dp_ZZZ = fcast_dp
#Dataframe zum Vergleichen initialisieren:
model_comparison = data.frame(matrix(ncol = 2, nrow = 3))
colnames(model_comparison) = c("ANA","ZZZ")
rownames(model_comparison) = c("MAE","MSE","MAPE")
#Mean Absolute Error (MAE)
model_comparison[c("MAE"),c("ANA")] = round(mean(abs(as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted))),2)
model_comparison[c("MAE"),c("ZZZ")] = round(mean(abs(as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted))),2)
#Mean Squared Error (MSE)
model_comparison[c("MSE"),c("ANA")] = round(mean((as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted)^2)),2)
model_comparison[c("MSE"),c("ZZZ")] = round(mean((as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted)^2)),2)
#Mean Absolute Percentage Error (MAPE)
model_comparison[c("MAPE"),c("ANA")] =  paste(round(mean(abs((as.numeric(fcast_dp_ANA$x - fcast_dp_ANA$fitted)/as.numeric(fcast_dp_ANA$x)) * 100)),2),"%")
model_comparison[c("MAPE"),c("ZZZ")] =  paste(round(mean(abs((as.numeric(fcast_dp_ZZZ$x - fcast_dp_ZZZ$fitted)/as.numeric(fcast_dp_ZZZ$x)) * 100)),2),"%")
model_comparison
#Modelle erstellen:
fcast_Japan = forecast(ets(ts_Japan, model= "ZZZ"),12)
fcast_Peking = fcast_dp
fcast_Phlppn = forecast(ets(ts_Phlppn, model= "ZZZ"),12)
fcast_Shangh = forecast(ets(ts_Shangh, model= "ZZZ"),12)
fcast_Skorea = forecast(ets(ts_Skorea, model= "ZZZ"),12)
#Dataframe zum Vergleichen initialisieren:
region_comparison = data.frame(matrix(ncol = 5, nrow = 2))
colnames(region_comparison) = c("Japan","Peking","Phlppn","Shangh","Skorea")
rownames(region_comparison) = c("Modell","MAE")
#Fehlerkennzahlen eintragen:
region_comparison[c("MAE"),c("Japan")] = round(mean(abs(as.numeric(fcast_Japan$x - fcast_Japan$fitted))),2)
region_comparison[c("MAE"),c("Peking")] = round(mean(abs(as.numeric(fcast_Peking$x - fcast_Peking$fitted))),2)
region_comparison[c("MAE"),c("Phlppn")] = round(mean(abs(as.numeric(fcast_Phlppn$x - fcast_Phlppn$fitted))),2)
region_comparison[c("MAE"),c("Shangh")] = round(mean(abs(as.numeric(fcast_Shangh$x - fcast_Shangh$fitted))),2)
region_comparison[c("MAE"),c("Skorea")] = round(mean(abs(as.numeric(fcast_Skorea$x - fcast_Skorea$fitted))),2)
#Modelle eintragen:
region_comparison[c("Modell"),c("Japan")] = fcast_Japan$method
region_comparison[c("Modell"),c("Peking")] = fcast_Peking$method
region_comparison[c("Modell"),c("Phlppn")] = fcast_Phlppn$method
region_comparison[c("Modell"),c("Shangh")] = fcast_Shangh$method
region_comparison[c("Modell"),c("Skorea")] = fcast_Skorea$method
region_comparison
#Demand für alle
Demand_21SE2 = round(sum(data.frame(fcast_Japan$mean)[7:12,],
data.frame(fcast_Peking$mean)[7:12,],
data.frame(fcast_Phlppn$mean)[7:12,],
data.frame(fcast_Shangh$mean)[7:12,],
data.frame(fcast_Skorea$mean)[7:12,]))
cat("Für die zweite Hälfte von 2021 werden ca.",Demand_21SE2,"Flaschen benötigt")
# Erstellen eines Subset in dem alle Sales fuer unser Produkt enthalten sind
sales_206 = subset (transaktionen, Product == "Gruppe206")
# Erstellen einer Tabelle mit der Nachfrage je Monat/Jahr in Japan für unser Produkt
Demand_206 = aggregate(Sales ~ region + Year + Month, data = sales_206, sum)
Demand_Japan = subset (Demand_206, region =="Japan")
#Filtern der Ergebnisse nach Monat Dezember
Demand_Japan_December = subset (Demand_Japan, Month == "12")
Demand_Japan_December_Total = aggregate(Sales ~ region, data = Demand_Japan_December, sum)
Demand_Japan_December_Average = round(Demand_Japan_December_Total$Sales/5)
cat("Durchschnittlich wurden im Monat Dezember",Demand_Japan_December_Average,"Flaschen in Olaf's
Supermarkt in Japan nachgefragt.")
cat( "\n")
cat("\n")
# Erstellen einer Zeitreihe für Japan
periode2=sprintf("%1.0f, %02d", sales_206$Year, sales_206$Month)
Demand_206_ts = aggregate(Sales ~ region + periode2, data = sales_206, sum)
Demand_206_Japan_ts = subset (Demand_206_ts, region =="Japan")
ts_Japan2 = ts(Demand_206_Japan_ts$Sales, frequency = 12)
# Automatisches Modell für Japan erstellen
m_Japan_206 = ets(ts_Japan2, model = "ZZZ")
#Forecast für Japan in 2021 erstellen (12 Monate)
fcast_Japan = forecast(ts_Japan2, 12)
# Forecast in einen präparierten Dataframe einfügen
Japan_Forecast = data.frame(matrix(ncol = 2, nrow = 12))
colnames(Japan_Forecast) = c("Month","Demand_Forecast_Japan_2021")
Japan_Forecast$Month <- c("Januar" , "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember")
Japan_Forecast$Demand_Forecast_Japan_2021 = as.numeric(fcast_Japan$mean)
# Forecast nur für den Dezember in 2021 ausgeben
Forecast_Dezember = subset (Japan_Forecast, Month == "Dezember")
Dezember2021 = round(Forecast_Dezember$Demand_Forecast_Japan_2021)
# Differenz des neuen Forecast zum bisherigen Durchschnitt berechnen und Ergebnisse ausgeben
Dezember2021_Diff = Dezember2021 - Demand_Japan_December_Average
cat("\n")
cat("Im Dezember dieses Jahres kann Olaf mit einer Nachfrage von", Dezember2021, "Flaschen unserer Limonaden-Marke rechnen.")
cat("\n")
cat("Das heißt er muss mit einer erhöhten Nachfrage von ca.", Dezember2021_Diff, "Flaschen im Vergleich zum bisherigen Durchschnitt im Dezember rechnen.")
