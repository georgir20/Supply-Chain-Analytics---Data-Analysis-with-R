knitr::opts_chunk$set(echo = TRUE)
transaktionen = read.csv2("output_transactions_8Players_v0013.csv")
knitr::opts_chunk$set(echo = TRUE)
transaktionen = read.csv2("output_transactions_8Players_v0013.csv")
service = read.csv2("output_services_8Players_v0013.csv")
preise = read.csv2("output_prices_8Players_v0013.csv")
kosten = read.csv2("output_cost_8Players_v0013.csv")
cat("Zusammenfassung der Variablen der Transaktionsdaten:\n\n")
summary(transaktionen)
cat("\n Zusammenfassung der Variablen der Servicedaten:\n\n")
summary(service)
cat("\n Zusammenfassung der Variablen der Preisdaten:\n\n")
summary(preise)
cat("\n Zusammenfassung der Variablen der Kostendaten:\n\n")
summary(kosten)
knitr::opts_chunk$set(echo = TRUE)
transaktionen = read.csv2("output_transactions_8Players_v0013.csv")
service = read.csv2("output_services_8Players_v0013.csv")
preise = read.csv2("output_prices_8Players_v0013.csv")
kosten = read.csv2("output_cost_8Players_v0013.csv")
cat("Zusammenfassung der Variablen der Transaktionsdaten:\n\n")
summary(transaktionen)
cat("\n Zusammenfassung der Variablen der Servicedaten:\n\n")
summary(service)
cat("\n Zusammenfassung der Variablen der Preisdaten:\n\n")
summary(preise)
cat("\n Zusammenfassung der Variablen der Kostendaten:\n\n")
summary(kosten)
# Region in den Transaktionsdaten in Factor-Datentyp umwandeln:
transaktionen$region = as.factor(transaktionen$region)
transaktionen$date <- paste(transaktionen$Year, transaktionen$Month, transaktionen$Day, sep= "-")
transaktionen$date = as.Date(transaktionen$date)
# alle Datenpunkte die ausserhalb der Zeitspanne von 2016 bis 2020 liegen entfernen:
transaktionen = transaktionen[transaktionen$Year<="2020",]
# Region, Storename, Product, Vendor und Service in den Servicedaten in Factor-Datentyp umwandeln:
# die Spalten Year, Month , Day zu einer neuen Spalte zusammenfügen und in Date-Datentyp umwandeln:
service$region = as.factor(service$region)
service$storename = as.factor(service$region)
service$Product = as.factor(service$Product)
service$vendor = as.factor(service$vendor)
service$service = as.factor(service$service)
service$date <- paste(service$Year, service$Month, service$Day, sep= "-")
service$date = as.Date(service$date)
# Vendor und Service in den Preisdaten in Factor-Datentyp umwandeln:
preise$vendor = as.factor(preise$vendor)
preise$service = as.factor(preise$service)
# Product in den Productdaten in Factor-Datentyp umwandeln:
kosten$Product = as.factor(kosten$Product)
kosten$Product = as.factor(kosten$Product)
#Zusammenfassung aller Variablen ausgeben lassen:
cat("Zusammenfassung der Variablen der Transaktionsdaten:\n\n")
summary(transaktionen)
cat("\n Zusammenfassung der Variablen der Servicedaten:\n\n")
summary(service)
cat("\n Zusammenfassung der Variablen der Preisdaten:\n\n")
summary(preise)
cat("\n Zusammenfassung der Variablen der Kostendaten:\n\n")
summary(kosten)
produkte = data.frame(data.frame(table(transaktionen$Product))[,1])
colnames(produkte) = c("Produkte")
# -------------------------- Mit Anzahl der Transaktionen: ------------------------------------------
#colnames(produkte) = c("Produkt","Anzahl Transaktionen")
produkte
#Erstellen eines Dataframe, der die Logistikdienstleister und deren Dienstleistungen wiedergibt.
vendors1 = data.frame(Logistikdienstleister = service$vendor,Dienstleistung = service$service)
unique(vendors1[order(vendors1$Dienstleistung),])
stores = data.frame(table(transaktionen$storename))
colnames(stores) = c("Store","Transaktionen")
stores["Store", drop=FALSE]
#Verkäufe von Gruppe206 aufsummieren:
sales_206 = aggregate(Sales~Product,data = transaktionen,sum)
sales_206 = sales_206[sales_206$Product == "Gruppe206",c("Sales")]
cat("Es wurden", sales_206,"Flaschen Limonade des Unternehmens Gruppe 206 verkauft.","\n")
#Verkäufe von Gruppe206 durch Summe aller Verkäufe (ohne Lost Sales) teilen:
marktanteil_206 = sales_206/sum(transaktionen[transaktionen$Product != "Lost Sales",c("Sales")]) * 100
cat("Das Unternehmen Gruppe 206 hat einen Marktanteil von ", marktanteil_206,"%.","\n")
#Service Daten nach Gruppe 206 filtern
service_206 = service[service$Product == "Gruppe206",]
#Anzahl der Bestellungen pro Region zählen:
bestellungen = data.frame(table(service_206$region))
#Anzahl Bestellter Flaschen je Region für Product Gruppe206 aggregieren:
gesamtmenge = aggregate(QScheduled~region,data = service[service$Product == "Gruppe206",],sum)
#Durschnittliche Menge pro Bestellung aggregieren:
av_bestellungen = aggregate(QScheduled~region,data = service[service$Product == "Gruppe206",],mean)
#Spalten zusammenfügen:
absatz_ueberblick = cbind(bestellungen,gesamtmenge[,2],av_bestellungen[,2])
colnames(absatz_ueberblick) = c("Region","Bestellungen","Gesamtmenge","Durchschnittliche Menge pro Bestellung")
absatz_ueberblick
#Stichprobenartige Probe für Japan:
bestellungen_japan = length(service_206[service_206$region == "Japan",1])
cat("Kommentar:\n")
cat("In Japan gab es",bestellungen_japan,"Bestellungen. Dies stimmt mit der Tabelle überein.","\n")
gesamtmenge_japan = gesamtmenge[gesamtmenge$region =="Japan",2]
cat("In Japan wurden",gesamtmenge_japan,"Flaschen bestellt. Dies stimmt mit der Tabelle überein.","\n")
av_bestellungen_japan = av_bestellungen[av_bestellungen$region =="Japan",2]
cat("In Japan wurden durschschnittlich",av_bestellungen_japan,"Flaschen bestellt. Dies stimmt mit der Tabelle überein.","\n")
sales_206 = aggregate(Sales~Year,data = transaktionen[transaktionen$Product == "Gruppe206",],sum)
sales_gesamt = aggregate(Sales~Year,data = transaktionen[transaktionen$Product != "Lost Sales",],sum)
#Jahreszahlen in Marktanteiltabelle schreiben:
marktanteil_206 = sales_206
#Marktanteil berechnen:
marktanteil_206[,2] = sales_206[,2] / sales_gesamt[,2] * 100
colnames(marktanteil_206) = c("Jahr","Marktanteil in %")
marktanteil_206
sales_month_206 = aggregate(Sales~Month,data = transaktionen[transaktionen$Product == "Gruppe206",],mean)
sales_month_206
hoechster_absatz_monat = sales_month_206[sales_month_206$Sales == max(sales_month_206),1]
cat("Der höchste durchschnittliche Absatz tritt mit", max(sales_month_206),"Produkten im",hoechster_absatz_monat,"ten Monat des Jahres auf.","\n")
# Verwendung von Tabellen "Transaktionen" und "Kosten"
SalesTotal = aggregate(Sales ~ Product, data =
subset(transaktionen, Product== "Gruppe206"), sum)
#Berechnung Gesamtumsatz = GesamtSales * VerkaufspreisproFlasche(4,5 GE)
Gesamtumsatz = SalesTotal$Sales * 4.5
cat("Gesamtumsatz =",Gesamtumsatz,"GE")
CostTotal = aggregate(Amount ~ Product, data =
subset(kosten, Product== "Gruppe206"), sum)
cat("\n \n")
Gesamtkosten = CostTotal$Amount
cat("Gesamtkosten =",Gesamtkosten,"GE")
cat("\n \n")
Gesamtprofit = Gesamtumsatz - Gesamtkosten
cat("Gesamtprofit =",Gesamtprofit,"GE")
# Laden der Library ggplot für die Datenvisualisierung
library("ggplot2")
#Aggregieren der Verkäufe pro Monat für das Jahr 2020 und Produktgruppe 206
Sales2020base =  subset(transaktionen, (Product== "Gruppe206" & Year=="2020"))
Sales2020 = aggregate(Sales ~ Month, data = Sales2020base, sum)
#Berechnung des Umsatzes pro Monat und richtige Darstellung in Tabelle
Revenue = Sales2020$Sales * 4.5
Revenue2020 = cbind(Sales2020, Revenue)
#Aggregieren der Kosten pro Monat für das Jahr 2020 und Produktgruppe 206
Costs2020base =  subset(kosten, (Product== "Gruppe206" & Year=="2020"))
Costs2020 = aggregate(Amount ~ Month, data = Costs2020base, sum)
colnames(Costs2020) = c("Month","Costs")
# Verschmelzung von "Umsatz" und "Kosten" Tabelle in eine gesamte "Profit" Tabelle
Profit2020 <- merge (Revenue2020, Costs2020, by="Month")
#Berechnung des konkreten Profits/Monat in einer neuen Spalte; Neue Spalten um Max und Min Profit herauszustellen
Profit2020$Profit= Profit2020$Revenue - Profit2020$Costs
Profit2020
#Säulendiagramm mit Highlighten der "Min" und "Max" Monate
ggplot(Profit2020, aes(x = Month, y = Profit, fill = Profit)) + geom_col() + labs(title= "Profit für das Jahr 2020") + scale_x_discrete(name = "Month", limits = c("1","2","3","4","5","6","7","8","9","10","11","12"))
#Service Daten nach Product 206 filtern:
service_206 = subset(service, Product== "Gruppe206")
#Spalte "OnTime" hinzufügen und mit 1 füllen wenn pünktlich und mit 0 füllen wenn unpünktlich
service_206$OnTime = service_206$DaysScheduled >= service_206$DaysExecuted
#Kosten der pünktlichen Lieferungen in Shanghai pro Jahr:
shangh_OnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "TRUE"
& service_206$region == "Shangh",], sum)
#Kosten der unpünktlichen Lieferungen in Shanghai pro Jahr:
shangh_NotOnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "FALSE"
& service_206$region == "Shangh",], sum)
#Kosten der pünktlichen Lieferungen in Japan pro Jahr:
japan_OnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "TRUE"
& service_206$region == "Japan",], sum)
#Kosten der unpünktlichen Lieferungen in Japan pro Jahr:
japan_NotOnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "FALSE"
& service_206$region == "Japan",], sum)
#Kosten der pünktlichen Lieferungen in Peking pro Jahr:
peking_OnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "TRUE"
& service_206$region == "Peking",], sum)
#Kosten der unpünktlichen Lieferungen in Peking pro Jahr:
peking_NotOnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "FALSE"
& service_206$region == "Peking",], sum)
#Kosten der pünktlichen Lieferungen in Phlppn pro Jahr:
phlppn_OnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "TRUE"
& service_206$region == "Phlppn",], sum)
#Kosten der unpünktlichen Lieferungen in Phlppn pro Jahr:
phlppn_NotOnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "FALSE"
& service_206$region == "Phlppn",], sum)
#Kosten der pünktlichen Lieferungen in Skorea pro Jahr:
skorea_OnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "TRUE"
& service_206$region == "Skorea",], sum)
#Kosten der unpünktlichen Lieferungen in Skorea pro Jahr:
skorea_NotOnTime = aggregate(cost~Year,data = service_206[service_206$OnTime== "FALSE"
& service_206$region == "Skorea",], sum)
#Merge all 10 dataframes:
region_service_costs <- merge(shangh_OnTime,shangh_NotOnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,japan_OnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,japan_NotOnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,peking_OnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,peking_NotOnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,phlppn_OnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,phlppn_NotOnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,skorea_OnTime,by="Year",all=TRUE)
region_service_costs <- merge(region_service_costs,skorea_NotOnTime,by="Year",all=TRUE)
colnames(region_service_costs) = c("Year","shangh_OnTime","shangh_NotOnTime",
"japan_OnTime","japan_NotOnTime",
"peking_OnTime","peking_NotOnTime",
"phlppn_OnTime","phlppn_NotOnTime",
"skorea_OnTime","skorea_NotOnTime")
head(region_service_costs)
#Plot all 10 dataframes as lines:
ggplot(data=region_service_costs, aes(x=Year)) +
geom_line(aes(y = shangh_OnTime, col="Shanghai",linetype="Pünktlich"))  +
geom_line(aes(y = shangh_NotOnTime, col="Shanghai",linetype="Nicht pünktlich")) +
geom_line(aes(y = japan_OnTime, col="Japan",linetype="Pünktlich"))  +
geom_line(aes(y = japan_NotOnTime, col="Japan",linetype="Nicht pünktlich"))  +
geom_line(aes(y = peking_OnTime, col="Peking",linetype="Pünktlich"))  +
geom_line(aes(y = peking_NotOnTime, col="Peking",linetype="Nicht pünktlich"))  +
geom_line(aes(y = phlppn_OnTime, col="Phillipinen",linetype="Pünktlich"))  +
geom_line(aes(y = phlppn_NotOnTime, col="Phillipinen",linetype="Nicht pünktlich"))  +
geom_line(aes(y = skorea_OnTime, col="Südkorea",linetype="Pünktlich"))  +
geom_line(aes(y = skorea_NotOnTime, col="Südkorea",linetype="Nicht pünktlich")) +
xlab("Jahr") +
ylab("Kosten für Transportdienstleistungen in GE") +
labs(colour = "Region") +
labs(linetype = "Pünktlichkeit")
# Aufsummierung der Lieferungskosten für unsere Produktgruppe
CostDelivery = aggregate(cost ~ Product, data =
subset(service, Product== "Gruppe206"), sum)
QScheduled = aggregate(QScheduled ~ Product, data =
subset(service, Product== "Gruppe206"), sum)
CostDelivery$QScheduled = QScheduled$QScheduled
QExecuted = aggregate(QExecuted ~ Product, data =
subset(service, Product== "Gruppe206"), sum)
CostDelivery$QExecuted = QExecuted$QExecuted
CostDelivery
#Berechnungen der einzelnen Kostenfaktoren pro ausgelieferte Ware
CostQSched = CostDelivery$cost / CostDelivery$QScheduled
CostQExec = CostDelivery$cost / CostDelivery$QExecuted
CostQDiff = (CostQExec - CostQSched) /CostQSched * 100
# Ausgabe der erwünschten Kostenfaktoren
cat("Die Stückkosten für die Lagerdienstleistung die geplant abgefertigt werden sollte, betraegt: ","\n",round(CostQSched, 2), "Geldeinheiten.", "\n")
cat("\n")
cat("Die Stückkosten für die Lagerdienstleistung die tatsächlich werden sollte, betraegt: ","\n",round(CostQExec, 2), "Geldeinheiten.", "\n")
cat("\n")
cat("Anteil pro Stück mehr bezahlt:")
cat("\n")
cat("Es wurden",round(CostQDiff,2), "% mehr bezahlt.")
# Hinzufuegen der Verspaetung als Variable in der Service Tabelle
service$Verspaetung = service$DaysExecuted - service$DaysScheduled
# Berechnen der On-Time Delivery Rate (OTD)
# Wenn der Verspaetung <= 0 ist, hat der Shipping-Dienstleister die vereinbarte Lieferzeit eingehalten
service$OTD = service$Verspaetung <= 0
#Mittelwert der OTD Rate über die verschiedenen Shipping_Dienstleister für alle Produkte
Durchschnittliche_OTD = sort(round(tapply(service$OTD*100, service$vendor,
mean), 2), decreasing = FALSE)
# Erstellen eines Subsets, das nur Produkt 206 enthaelt und nur Shipping-Services betrachtet
subsetShipping = subset(service, Product == "Gruppe206" &
service == "Shipping")
# Mittelwert der OTD Rate über die verschiedenen Shipping-Dienstleister für unser Produkt 206 aufsteigendsortiert und gerundet
Durchschnitt_OTD206_inPercent = sort(round(tapply(subsetShipping$OTD*100, subsetShipping$vendor,
mean), 2), decreasing = FALSE)
data.frame(Durchschnitt_OTD206_inPercent)
# IFR = # Anzahl tatsächlich ausgelieferter Warenstücke an Kunde (QExecuted) / # Anzahl geplanter ausgelieferter Warenstücke an Kunde (QScheduled)
# Berechnung der IFR fuer alle Dienstleistungen als zusaetzliche Variable der Service Tabelle
service$IFR = service$QExecuted/service$QScheduled
# Erstellen eines Subsets, das nur Produkt 206 enthaelt und nur Warehousing-Services
WarehousingService = subset(service, Product == "Gruppe206" & service
== "Warehousing")
# Berechnung der durchschnittlichen IFR fuer die Warehousing-Dienstleister
IFRDienstleister = aggregate(IFR*100 ~ vendor, data = WarehousingService, mean)
colnames(IFRDienstleister)= c("vendor", "IFR in %")
# Runden der Spalte IFR und Ausgabe der Aggregation mit aufsteigender Sortierung
IFRDienstleister[2] = round(IFRDienstleister[2],2)
IFRDienstleister[order(IFRDienstleister$IFR),]
# Erstellen eines Boxplot ueber ein Subset der Services-Tabelle, das nur Warehousing-DL enthaelt
ggplot(data = subset(service, service == "Warehousing"),
# Wahl der x- und y-Achsen
aes(x = IFR, y = vendor)) +
geom_boxplot()
#Subsets definieren für die einzelnen Region für unser Produkt(206) und aus dem Shipping Bereich
subsetShippingShangh = subset(service, Product == "Gruppe206" &  service == "Shipping" & region == "Shangh")
subsetShippingJapan  = subset(service, Product == "Gruppe206" &  service == "Shipping" & region == "Japan")
subsetShippingPeking = subset(service, Product == "Gruppe206" &  service == "Shipping" & region == "Peking")
subsetShippingSkorea = subset(service, Product == "Gruppe206" &  service == "Shipping" & region == "Skorea")
subsetShippingPhlppn = subset(service, Product == "Gruppe206" &  service == "Shipping" & region == "Phlppn")
OTD_Shangh = aggregate(OTD~vendor,data=subsetShippingShangh,mean)
OTD_Japan = aggregate(OTD~vendor,data=subsetShippingJapan,mean)
OTD_Peking = aggregate(OTD~vendor,data=subsetShippingPeking,mean)
OTD_Skorea = aggregate(OTD~vendor,data=subsetShippingSkorea,mean)
OTD_Phlppn = aggregate(OTD~vendor,data=subsetShippingPhlppn,mean)
OTD <- merge(OTD_Shangh,OTD_Japan,by="vendor")
OTD <- merge(OTD,OTD_Peking,by="vendor")
OTD <- merge(OTD,OTD_Skorea,by="vendor")
OTD <- merge(OTD,OTD_Phlppn,by="vendor")
colnames(OTD) = c("region","OTD_Shangh","OTD_Japan","OTD_Peking","OTD_Skorea","OTD_Phlppn")
#Safe vendor names for the lables of the plot down below:
vendor = OTD[,1]
#OTD transformieren:
OTD = data.frame(t(OTD))
#Die Row names in erste Spalte umwandeln:
OTD <- cbind(rownames(OTD), data.frame(OTD, row.names=NULL))
#Copy first row into the colum names:
colnames(OTD) = c(OTD[1,])
#Delete first row:
OTD = OTD[-1,]
#Convert OTDs to numeric:
OTD[,2:11] = sapply(OTD[,2:11], as.numeric)
OTD[,2:11] = OTD[,2:11] *100
#names(OTD)<-str_replace(names(OTD), c(" " = "_"))
colnames(OTD) = make.names(colnames(OTD))
OTD
ggplot(data=OTD, mapping = aes(x = region)) +
geom_point(aes(y=AHL.Express.Shipping, col=vendor[1])) +
geom_point(aes(y=Bange.Hammer.Shipping, col=vendor[2])) +
geom_point(aes(y=CPS.Shipping, col=vendor[3])) +
geom_point(aes(y=DWL.Shipping, col=vendor[4])) +
geom_point(aes(y=EPD.Shipping, col=vendor[5])) +
geom_point(aes(y=Flying.Mercury.Shipping, col=vendor[6])) +
geom_point(aes(y=Gifter.Shipping, col=vendor[7])) +
geom_point(aes(y=HCX.Shipping, col=vendor[8])) +
geom_point(aes(y=IntEx.Shipping, col=vendor[9])) +
geom_point(aes(y=JNT.Shipping, col=vendor[10])) +
xlab("Region") +
ylab("On Time Delivery Rate in %") +
labs(colour = "Shipping-Dienstleister")
