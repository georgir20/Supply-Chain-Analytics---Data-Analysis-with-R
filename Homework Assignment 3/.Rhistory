progress = FALSE,
# mit Visualisierung einer Glaettungslinie und Aenderung der Farbe der Punkte,
#damit Linie erkennbar
lower = list(continuous = wrap("smooth_loess", colour = "steelblue1")))
# Baseline durch Mittelwert erzeugen und Ausgabe in einem neuen Dataframe
AHL_externals$Baseline = mean(AHL_externals$IFR)
df_base = head(AHL_externals[, c("Period", "region", "IFR","Baseline")])
df_base %>%
mutate_if(is.numeric, round, digits=3)
# Subset fuer die Region Shanghai erstellen
AHL_externals_Shang= subset(AHL_externals, region=="Shangh")
# Erzeugung Liniendiagramm
ggplot(data=AHL_externals_Shang, aes(ymin = 0.75, ymax = 0.95)) +
# Hinufügen von IFR und Baseline
geom_line(data=AHL_externals_Shang, aes(x=seq(1,length(Period),1), y=IFR,
colour = 'IFR')) +
# Zweite Linie hinzufuegen (Baseline)
geom_line(data=AHL_externals_Shang, aes(x=seq(1,length(Period),1), y=Baseline,
colour = 'Baseline')) +
labs(x = "Jahr", title="IFR-Verlauf von CPS Warehousing in Shanghai") +
scale_x_continuous(breaks = c(1,13,25,37,49, 61),
labels = c("2016","2017","2018","2019", "2020", "2021"))
# Subset fuer die Region Peking erstellen
AHL_externals_Peking = subset(AHL_externals, region=="Peking")
# Erzeugung Liniendiagramm
ggplot(data=AHL_externals_Peking, aes(ymin = 0.75, ymax = 0.95)) +
# Hinufügen von IFR und Baseline
geom_line(data=AHL_externals_Peking, aes(x=seq(1,length(Period),1), y=IFR,
colour = 'IFR')) +
# Zweite Linie hinzufuegen (Baseline)
geom_line(data=AHL_externals_Peking, aes(x=seq(1,length(Period),1), y=Baseline,
colour = 'Baseline')) +
labs(x = "Jahr", title="IFR-Verlauf von CPS Warehousing in Peking") +
scale_x_continuous(breaks = c(1,13,25,37,49, 61),
labels = c("2016","2017","2018","2019", "2020", "2021"))
# DataFrame erzeugen, das mit den werten der Modellbewertung später gefüllt wird
evaluation = data.frame(Model = "Baseline",
MAE  = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1))
# MAE berechnen
evaluation[evaluation$Model == "Baseline",]$MAE = mean(abs(AHL_externals$IFR - AHL_externals$Baseline))
# MAPE berechnen
evaluation[evaluation$Model == "Baseline",]$MAPE = mape(AHL_externals$IFR, AHL_externals$Baseline)
# R-Squared berechnen
evaluation[evaluation$Model == "Baseline",]$R_Squared = ""
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Baseline",]$R_Squared_adj = ""
evaluation
set.seed(4141)
#Zufällig gezogenes Sample erstellen
zufall = sample(1:nrow(AHL_externals), nrow(AHL_externals) * 0.8)
AHL_externals_training = AHL_externals[zufall, ]
rownames(AHL_externals_training) = NULL
head(AHL_externals_training)
AHL_externals_test = AHL_externals[-zufall, ]
rownames(AHL_externals_test) = NULL
# Ausgabe ohne Rundung der Werte, da  auch mit den genauen Werten weitergerechnet wird
head(AHL_externals_test)
# Modelle mit Trainings-Sets erstellen und anzeigen
model_1 = lm(IFR ~ ParkingSpaceAvailability, data = AHL_externals_training)
model_2 = lm(IFR ~ RoadCondition, data = AHL_externals_training)
model_3 = lm(IFR ~ Temperature_C, data = AHL_externals_training)
model_4 = lm(IFR ~ Sunshine_h, data = AHL_externals_training)
model_5 = lm(IFR ~ Inflation, data = AHL_externals_training)
summary(model_1)
summary(model_2)
summary(model_3)
summary(model_4)
summary(model_5)
# Residuenplot 1
ggplot(data = NULL, aes(x = model_1$model$ParkingSpaceAvailability, y = model_1$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 2
ggplot(data = NULL, aes(x = model_2$model$RoadCondition, y = model_2$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 3
ggplot(data = NULL, aes(x = model_3$model$Temperature_C, y = model_3$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 4
ggplot(data = NULL, aes(x = model_4$model$Sunshine_h, y = model_4$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 5
ggplot(data = NULL, aes(x = model_5$model$Inflation, y = model_5$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = c("Model1","Model2","Model3","Model4","Model5"),
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model1",]$MAE = mean(abs(model_1$residuals))
evaluation[evaluation$Model == "Model2",]$MAE = mean(abs(model_2$residuals))
evaluation[evaluation$Model == "Model3",]$MAE = mean(abs(model_3$residuals))
evaluation[evaluation$Model == "Model4",]$MAE = mean(abs(model_4$residuals))
evaluation[evaluation$Model == "Model5",]$MAE = mean(abs(model_5$residuals))
# MAPE berechnen
evaluation[evaluation$Model == "Model1",]$MAPE = mape(model_1$model$IFR, model_1$fitted.values)
evaluation[evaluation$Model == "Model2",]$MAPE = mape(model_2$model$IFR, model_2$fitted.values)
evaluation[evaluation$Model == "Model3",]$MAPE = mape(model_3$model$IFR, model_3$fitted.values)
evaluation[evaluation$Model == "Model4",]$MAPE = mape(model_4$model$IFR, model_4$fitted.values)
evaluation[evaluation$Model == "Model5",]$MAPE = mape(model_5$model$IFR, model_5$fitted.values)
# R-Squared berechnen
evaluation[evaluation$Model == "Model1",]$R_Squared = summary(model_1)$r.squared
evaluation[evaluation$Model == "Model2",]$R_Squared = summary(model_2)$r.squared
evaluation[evaluation$Model == "Model3",]$R_Squared = summary(model_3)$r.squared
evaluation[evaluation$Model == "Model4",]$R_Squared = summary(model_4)$r.squared
evaluation[evaluation$Model == "Model5",]$R_Squared = summary(model_5)$r.squared
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model1",]$R_Squared_adj = summary(model_1)$adj.r.squared
evaluation[evaluation$Model == "Model2",]$R_Squared_adj = summary(model_2)$adj.r.squared
evaluation[evaluation$Model == "Model3",]$R_Squared_adj = summary(model_3)$adj.r.squared
evaluation[evaluation$Model == "Model4",]$R_Squared_adj = summary(model_4)$adj.r.squared
evaluation[evaluation$Model == "Model5",]$R_Squared_adj = summary(model_5)$adj.r.squared
# Fehler anzeigen
evaluation
# Modelle mit Trainings-Sets erstellen und anzeigen
model_12 = lm(IFR ~ ParkingSpaceAvailability + RoadCondition, data = AHL_externals_training)
model_15 = lm(IFR ~ ParkingSpaceAvailability + Inflation, data = AHL_externals_training)
summary(model_12)
summary(model_15)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = c("Model12","Model15"),
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model12",]$MAE = mean(abs(model_12$residuals))
evaluation[evaluation$Model == "Model15",]$MAE = mean(abs(model_15$residuals))
# MAPE berechnen
evaluation[evaluation$Model == "Model12",]$MAPE = mape(model_12$model$IFR, model_12$fitted.values)
evaluation[evaluation$Model == "Model15",]$MAPE = mape(model_15$model$IFR, model_15$fitted.values)
# R-Squared berechnen
evaluation[evaluation$Model == "Model12",]$R_Squared = summary(model_12)$r.squared
evaluation[evaluation$Model == "Model15",]$R_Squared = summary(model_15)$r.squared
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model12",]$R_Squared_adj = summary(model_12)$adj.r.squared
evaluation[evaluation$Model == "Model15",]$R_Squared_adj = summary(model_15)$adj.r.squared
# Fehler anzeigen
evaluation
#Modelle mit Trainings-Sets erstellen
model_152 = lm(IFR ~ ParkingSpaceAvailability + Inflation + RoadCondition, data = AHL_externals_training)
#Modelle anzeigen
summary(model_152)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = c("Model152"),
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model152",]$MAE = mean(abs(model_152$residuals))
# MAPE berechnen
evaluation[evaluation$Model == "Model152",]$MAPE = mape(model_152$model$IFR, model_12$fitted.values)
# R-Squared berechnen
evaluation[evaluation$Model == "Model152",]$R_Squared = summary(model_152)$r.squared
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model152",]$R_Squared_adj = summary(model_152)$adj.r.squared
# Fehler anzeigen
evaluation
# Vorhersage treffen
pred15 = predict(model_15, newdata = AHL_externals_test)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = "Model15_test",
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model15_test",]$MAE = mean(abs(AHL_externals_test$IFR -pred15))
# MAPE berechnen
evaluation[evaluation$Model == "Model15_test",]$MAPE = mape(AHL_externals_test$IFR, pred15)
# R-Squared berechnen
evaluation[evaluation$Model == "Model15_test",]$R_Squared = ""
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model15_test",]$R_Squared_adj = ""
evaluation$MAE = round(evaluation$MAE, 3)
evaluation$MAPE = round(evaluation$MAPE, 3)
evaluation$R_Squared = round(as.numeric(evaluation$R_Squared), 3)
evaluation$R_Squared_adj = round(as.numeric(evaluation$R_Squared_adj), 3)
# Fehler anzeigen
evaluation[c(1,2,8,10),]
#Nur die Bewertung der Baseline und Model 15 ausgeben:
final_evaluation = evaluation[c(1,8),]
final_evaluation
cat("Das Model 15 reduziert den MAE um",round((1-final_evaluation[2,2]/final_evaluation[1,2])*100,1),"% gegenüber der Baseline.\n")
cat("Der MAPE wird um",round((1-final_evaluation[2,3]/final_evaluation[1,3])*100,1),"% gegenüber der Baseline verringert.\n")
cat("Mit einem R^2-Wert von",round(final_evaluation[2,4], 2),"ist die Aussagekraft des Modells außerdem akzeptabel.")
#Dataframe anlegen:
IFR_Dez12 = data.frame(Region = "",
ParkingSpaceAvailability = numeric(1),
Inflation = numeric(1),
predicted_IFR = numeric(1))
#ParkingSpaceAvailability für jede Region in Periode 2021/12 ins Dataframe hinzufügen:
IFR_Dez12[1:5,1:2] = aggregate(ParkingSpaceAvailability ~ region, data = externals[externals$Period=="2021/12",],mean)
#Inflation für jede Region in Periode 2021/12 ins Dataframe hinzufügen:
IFR_Dez12[,3] = aggregate(Inflation ~ region, data = externals[externals$Period=="2021/12",],mean)[,2]
#Vorhersage basierend auf Model 15 berechnen:
IFR_Dez12[,4] = predict(model_15,IFR_Dez12[,2:3])
#Dataframe formatieren:
rownames(IFR_Dez12) = NULL
IFR_Dez12$predicted_IFR = round(IFR_Dez12$predicted_IFR,3)
IFR_Dez12
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
transaktionen = read.csv2("output_transactions_8Players_v0013.csv")
service = read.csv2("output_services_8Players_v0013.csv")
preise = read.csv2("output_prices_8Players_v0013.csv")
kosten = read.csv2("output_cost_8Players_v0013.csv")
externals = read.csv2("externals13.csv")
library("dummies")
library("ggplot2")
library("Metrics")
library(dplyr)
# Laden der Daten:
service = read.csv2("output_services_8Players_v0013.csv")
externals = read.csv2("externals13.csv")
# Berechnen der OTD:
service$OTD = service$DaysExecuted <= service$DaysScheduled
# Berechnen der IFR:
service$IFR = service$QExecuted / service$QScheduled
# Berechnen der durchschnittlichen aggregierten IFR:
vendorIFR = aggregate(IFR ~ vendor, data = service, mean)
# Berechnen der durchschnittlichen aggregierten OTD pro Logistikdienstleister
vendorOTD = aggregate(OTD ~ vendor, data = service, mean)
# Erstellen einer Tabelle fuer IFR in der Kennzahlen absteigend und nur
# relevante Daten enthalten sind
vendorIFR_sorted = subset(vendorIFR[order(vendorIFR$IFR, decreasing = TRUE),], IFR!=1)
# Entfernen der Zeilennummer
rownames(vendorIFR_sorted) = NULL
# Erzeugung eines dataframes
df_IFR = data.frame(Logistikdienstleister_Warehousing = vendorIFR_sorted$vendor,
IFR = vendorIFR_sorted$IFR)
# die OTD-Werte auf 3 Nachkommastellen runden:
library(dplyr)
df_IFR %>%
mutate_if(is.numeric, round, digits=3)
# Erstellen einer Tabelle fuer IFR in der Kennzahlen absteigend und nur
# relevante Daten enthalten sind
vendortOTD_sort = subset(vendorOTD[order(vendorOTD$OTD, decreasing = TRUE),], OTD!=1)
# Entfernen der Zeilennummer
rownames(vendortOTD_sort) = NULL
# Erzeugung eines dataframes
df_OTD = data.frame(Logistikdienstleister_Shipping = vendortOTD_sort$vendor,
OTD_Rate = vendortOTD_sort$OTD)
# Runden der OTD-Werte auf 3 Nachkommastellen (da die Werte sehr nah bei einander liegen
# reicht eine Rundung auf 2 Nachkommastellen nicht für einen Vergleich aus)
df_OTD %>%
mutate_if(is.numeric, round, digits=3)
# Erstellen einer Periode
service$Period = sprintf("%1.0f/%02d",service$Year, service$Month)
# Erstellen eines Dataframes in der die aggregierte IFR je WH-DL über Region und Periode
# angezeigt wird
WH_IFR = aggregate(IFR ~ vendor + region + Period,
data = subset(service, service=="Warehousing"), mean)
#WH_IFR
WH_IFR_vendors = aggregate(IFR ~ vendor, data = subset(service, service=="Warehousing"), mean)
best_vendor_IFR = max(WH_IFR_vendors[,c("IFR")])
best_vendor = WH_IFR_vendors[WH_IFR_vendors$IFR == best_vendor_IFR,c("vendor")]
bv_IFR_peking = subset(WH_IFR, vendor==best_vendor & region=="Peking")
bv_min_IFR_peking = min(bv_IFR_peking[,c("IFR")])
bv_min_IFR_peking_periode = bv_IFR_peking[bv_IFR_peking$IFR == bv_min_IFR_peking,c("Period")]
bv_min_IFR_peking_periode
cat(best_vendor,"hat insgesamt die höchste IFR und ist damit der beste LDL für Warehousing.\n")
cat("Der LDL",best_vendor,"hat in Peking seine geringste IFR in der Periode",bv_min_IFR_peking_periode,".\n")
cat("Dort beträgt die IFR",round(bv_min_IFR_peking*100,1),"%.\n")
# Erzeugen von dataframe mit OTD für alle Shipping-Dienstleister
SH_OTD = aggregate(OTD ~ vendor + region + Period,
data = subset(service, service=="Shipping"), mean)
#SH_OTD
SH_OTD_vendors = aggregate(OTD ~ vendor, data = subset(service, service=="Shipping"), mean)
worst_vendor_OTD = min(SH_OTD_vendors[,c("OTD")])
worst_vendor = SH_OTD_vendors[SH_OTD_vendors$OTD == worst_vendor_OTD,c("vendor")]
wv_OTD_peking = subset(SH_OTD, vendor==worst_vendor & region=="Peking")
wv_max_OTD_peking = max(wv_OTD_peking[,c("OTD")])
wv_max_OTD_peking_periode = wv_OTD_peking[wv_OTD_peking$OTD == wv_max_OTD_peking,c("Period")]
cat(worst_vendor,"hat insgesamt die niedrigste OTD und ist damit der schlechteste LDL für Shipping.\n")
cat("Der LDL",worst_vendor,"hat in Peking seine höchste IFR in der Periode",wv_max_OTD_peking_periode,".\n")
cat("Dort beträgt die OTD",round(wv_max_OTD_peking*100,1),"%.\n")
AHL= subset(WH_IFR, vendor=="AHL Express Warehousing")
AHL_externals = merge(AHL,externals[externals$Year!="2021",])
AHL_externals = AHL_externals [, c((1:4), (8:29))]
head(AHL_externals)
# Korrelation zwischen externen Effekten und IFR herstellen
Correlation_Externals = cor(AHL_externals[, c(4:26)])
Cor_IFR_sub = Correlation_Externals[, c(0:2)]
Cor_IFR_sub
cor_Strong = data.frame(Cor_IFR_sub[c(rownames(data.frame(sort(abs(Cor_IFR_sub[,1]),TRUE)[2:6]))),1])
colnames(cor_Strong) = c("Correlation to IFR")
round(cor_Strong,3)
library("GGally")
ggpairs(AHL_externals[, c(rownames(cor_Strong),"IFR")],
# ohne Visualisierung des Fortschritts der Erstellung des plots
progress = FALSE,
# mit Visualisierung einer Glaettungslinie und Aenderung der Farbe der Punkte,
#damit Linie erkennbar
lower = list(continuous = wrap("smooth_loess", colour = "steelblue1")))
# Baseline durch Mittelwert erzeugen und Ausgabe in einem neuen Dataframe
AHL_externals$Baseline = mean(AHL_externals$IFR)
df_base = head(AHL_externals[, c("Period", "region", "IFR","Baseline")])
df_base %>%
mutate_if(is.numeric, round, digits=3)
# Subset fuer die Region Shanghai erstellen
AHL_externals_Shang= subset(AHL_externals, region=="Shangh")
# Erzeugung Liniendiagramm
ggplot(data=AHL_externals_Shang, aes(ymin = 0.75, ymax = 0.95)) +
# Hinufügen von IFR und Baseline
geom_line(data=AHL_externals_Shang, aes(x=seq(1,length(Period),1), y=IFR,
colour = 'IFR')) +
# Zweite Linie hinzufuegen (Baseline)
geom_line(data=AHL_externals_Shang, aes(x=seq(1,length(Period),1), y=Baseline,
colour = 'Baseline')) +
labs(x = "Jahr", title="IFR-Verlauf von CPS Warehousing in Shanghai") +
scale_x_continuous(breaks = c(1,13,25,37,49, 61),
labels = c("2016","2017","2018","2019", "2020", "2021"))
# Subset fuer die Region Peking erstellen
AHL_externals_Peking = subset(AHL_externals, region=="Peking")
# Erzeugung Liniendiagramm
ggplot(data=AHL_externals_Peking, aes(ymin = 0.75, ymax = 0.95)) +
# Hinufügen von IFR und Baseline
geom_line(data=AHL_externals_Peking, aes(x=seq(1,length(Period),1), y=IFR,
colour = 'IFR')) +
# Zweite Linie hinzufuegen (Baseline)
geom_line(data=AHL_externals_Peking, aes(x=seq(1,length(Period),1), y=Baseline,
colour = 'Baseline')) +
labs(x = "Jahr", title="IFR-Verlauf von CPS Warehousing in Peking") +
scale_x_continuous(breaks = c(1,13,25,37,49, 61),
labels = c("2016","2017","2018","2019", "2020", "2021"))
# DataFrame erzeugen, das mit den werten der Modellbewertung später gefüllt wird
evaluation = data.frame(Model = "Baseline",
MAE  = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1))
# MAE berechnen
evaluation[evaluation$Model == "Baseline",]$MAE = mean(abs(AHL_externals$IFR - AHL_externals$Baseline))
# MAPE berechnen
evaluation[evaluation$Model == "Baseline",]$MAPE = mape(AHL_externals$IFR, AHL_externals$Baseline)
# R-Squared berechnen
evaluation[evaluation$Model == "Baseline",]$R_Squared = ""
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Baseline",]$R_Squared_adj = ""
evaluation
set.seed(4141)
#Zufällig gezogenes Sample erstellen
zufall = sample(1:nrow(AHL_externals), nrow(AHL_externals) * 0.8)
AHL_externals_training = AHL_externals[zufall, ]
rownames(AHL_externals_training) = NULL
head(AHL_externals_training)
AHL_externals_test = AHL_externals[-zufall, ]
rownames(AHL_externals_test) = NULL
# Ausgabe ohne Rundung der Werte, da  auch mit den genauen Werten weitergerechnet wird
head(AHL_externals_test)
# Modelle mit Trainings-Sets erstellen und anzeigen
model_1 = lm(IFR ~ ParkingSpaceAvailability, data = AHL_externals_training)
model_2 = lm(IFR ~ RoadCondition, data = AHL_externals_training)
model_3 = lm(IFR ~ Temperature_C, data = AHL_externals_training)
model_4 = lm(IFR ~ Sunshine_h, data = AHL_externals_training)
model_5 = lm(IFR ~ Inflation, data = AHL_externals_training)
summary(model_1)
summary(model_2)
summary(model_3)
summary(model_4)
summary(model_5)
# Residuenplot 1
ggplot(data = NULL, aes(x = model_1$model$ParkingSpaceAvailability, y = model_1$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 2
ggplot(data = NULL, aes(x = model_2$model$RoadCondition, y = model_2$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 3
ggplot(data = NULL, aes(x = model_3$model$Temperature_C, y = model_3$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 4
ggplot(data = NULL, aes(x = model_4$model$Sunshine_h, y = model_4$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Residuenplot 5
ggplot(data = NULL, aes(x = model_5$model$Inflation, y = model_5$residuals)) +
geom_point() +
geom_smooth(se = FALSE, method = loess)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = c("Model1","Model2","Model3","Model4","Model5"),
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model1",]$MAE = mean(abs(model_1$residuals))
evaluation[evaluation$Model == "Model2",]$MAE = mean(abs(model_2$residuals))
evaluation[evaluation$Model == "Model3",]$MAE = mean(abs(model_3$residuals))
evaluation[evaluation$Model == "Model4",]$MAE = mean(abs(model_4$residuals))
evaluation[evaluation$Model == "Model5",]$MAE = mean(abs(model_5$residuals))
# MAPE berechnen
evaluation[evaluation$Model == "Model1",]$MAPE = mape(model_1$model$IFR, model_1$fitted.values)
evaluation[evaluation$Model == "Model2",]$MAPE = mape(model_2$model$IFR, model_2$fitted.values)
evaluation[evaluation$Model == "Model3",]$MAPE = mape(model_3$model$IFR, model_3$fitted.values)
evaluation[evaluation$Model == "Model4",]$MAPE = mape(model_4$model$IFR, model_4$fitted.values)
evaluation[evaluation$Model == "Model5",]$MAPE = mape(model_5$model$IFR, model_5$fitted.values)
# R-Squared berechnen
evaluation[evaluation$Model == "Model1",]$R_Squared = summary(model_1)$r.squared
evaluation[evaluation$Model == "Model2",]$R_Squared = summary(model_2)$r.squared
evaluation[evaluation$Model == "Model3",]$R_Squared = summary(model_3)$r.squared
evaluation[evaluation$Model == "Model4",]$R_Squared = summary(model_4)$r.squared
evaluation[evaluation$Model == "Model5",]$R_Squared = summary(model_5)$r.squared
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model1",]$R_Squared_adj = summary(model_1)$adj.r.squared
evaluation[evaluation$Model == "Model2",]$R_Squared_adj = summary(model_2)$adj.r.squared
evaluation[evaluation$Model == "Model3",]$R_Squared_adj = summary(model_3)$adj.r.squared
evaluation[evaluation$Model == "Model4",]$R_Squared_adj = summary(model_4)$adj.r.squared
evaluation[evaluation$Model == "Model5",]$R_Squared_adj = summary(model_5)$adj.r.squared
# Fehler anzeigen
evaluation
# Modelle mit Trainings-Sets erstellen und anzeigen
model_12 = lm(IFR ~ ParkingSpaceAvailability + RoadCondition, data = AHL_externals_training)
model_15 = lm(IFR ~ ParkingSpaceAvailability + Inflation, data = AHL_externals_training)
summary(model_12)
summary(model_15)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = c("Model12","Model15"),
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model12",]$MAE = mean(abs(model_12$residuals))
evaluation[evaluation$Model == "Model15",]$MAE = mean(abs(model_15$residuals))
# MAPE berechnen
evaluation[evaluation$Model == "Model12",]$MAPE = mape(model_12$model$IFR, model_12$fitted.values)
evaluation[evaluation$Model == "Model15",]$MAPE = mape(model_15$model$IFR, model_15$fitted.values)
# R-Squared berechnen
evaluation[evaluation$Model == "Model12",]$R_Squared = summary(model_12)$r.squared
evaluation[evaluation$Model == "Model15",]$R_Squared = summary(model_15)$r.squared
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model12",]$R_Squared_adj = summary(model_12)$adj.r.squared
evaluation[evaluation$Model == "Model15",]$R_Squared_adj = summary(model_15)$adj.r.squared
# Fehler anzeigen
evaluation
#Modelle mit Trainings-Sets erstellen
model_152 = lm(IFR ~ ParkingSpaceAvailability + Inflation + RoadCondition, data = AHL_externals_training)
#Modelle anzeigen
summary(model_152)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = c("Model152"),
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model152",]$MAE = mean(abs(model_152$residuals))
# MAPE berechnen
evaluation[evaluation$Model == "Model152",]$MAPE = mape(model_152$model$IFR, model_12$fitted.values)
# R-Squared berechnen
evaluation[evaluation$Model == "Model152",]$R_Squared = summary(model_152)$r.squared
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model152",]$R_Squared_adj = summary(model_152)$adj.r.squared
# Fehler anzeigen
evaluation
# Vorhersage treffen
pred15 = predict(model_15, newdata = AHL_externals_test)
# Data Frame erweitern
evaluation = rbind(evaluation, data.frame(Model = "Model15_test",
MAE = numeric(1),
MAPE = numeric(1),
R_Squared = numeric (1),
R_Squared_adj = numeric(1)))
# MAE berechnen
evaluation[evaluation$Model == "Model15_test",]$MAE = mean(abs(AHL_externals_test$IFR -pred15))
# MAPE berechnen
evaluation[evaluation$Model == "Model15_test",]$MAPE = mape(AHL_externals_test$IFR, pred15)
# R-Squared berechnen
evaluation[evaluation$Model == "Model15_test",]$R_Squared = ""
# R-Squared_Adj berechnen
evaluation[evaluation$Model == "Model15_test",]$R_Squared_adj = ""
evaluation$MAE = round(evaluation$MAE, 3)
evaluation$MAPE = round(evaluation$MAPE, 3)
evaluation$R_Squared = round(as.numeric(evaluation$R_Squared), 3)
evaluation$R_Squared_adj = round(as.numeric(evaluation$R_Squared_adj), 3)
# Fehler anzeigen
evaluation[c(1,2,8,10),]
#Nur die Bewertung der Baseline und Model 15 ausgeben:
final_evaluation = evaluation[c(1,8),]
final_evaluation
cat("Das Model 15 reduziert den MAE um",round((1-final_evaluation[2,2]/final_evaluation[1,2])*100,1),"% gegenüber der Baseline.\n")
cat("Der MAPE wird um",round((1-final_evaluation[2,3]/final_evaluation[1,3])*100,1),"% gegenüber der Baseline verringert.\n")
cat("Mit einem R^2-Wert von",round(final_evaluation[2,4], 2),"ist die Aussagekraft des Modells außerdem akzeptabel.")
#Dataframe anlegen:
IFR_Dez12 = data.frame(Region = "",
ParkingSpaceAvailability = numeric(1),
Inflation = numeric(1),
predicted_IFR = numeric(1))
#ParkingSpaceAvailability für jede Region in Periode 2021/12 ins Dataframe hinzufügen:
IFR_Dez12[1:5,1:2] = aggregate(ParkingSpaceAvailability ~ region, data = externals[externals$Period=="2021/12",],mean)
#Inflation für jede Region in Periode 2021/12 ins Dataframe hinzufügen:
IFR_Dez12[,3] = aggregate(Inflation ~ region, data = externals[externals$Period=="2021/12",],mean)[,2]
#Vorhersage basierend auf Model 15 berechnen:
IFR_Dez12[,4] = predict(model_15,IFR_Dez12[,2:3])
#Dataframe formatieren:
rownames(IFR_Dez12) = NULL
IFR_Dez12$predicted_IFR = round(IFR_Dez12$predicted_IFR,3)
IFR_Dez12
